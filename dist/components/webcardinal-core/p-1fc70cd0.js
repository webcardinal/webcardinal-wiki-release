const t=/(.+?){([\w\W]*?)}/g,e=/\/\*[\w\W]*?\*\//g,s=/@media(.+?){([\s\n]*((.+?){([\w\W]*?)})*?[\s\n]*)*[\s\n]*}/g,a=/[~>+ ]/;class r{constructor(t,e){this.host=t,this.target=e}async applyFromHref(t){const e=await r.fetchSource(t);await this.applyFromStyleText(e)}async applyFromStyleText(t){t=r.removeComments(t),t=r.removeMediaQueries(t);let e=r.getRules(t);for(let[t,s]of Object.entries(e))this.applyProperties(this.host,t,s)}applyProperties(t,e,s){const o=t.querySelectorAll(e);if(o.length>0){t.host||console.warn("You must use custom styling only when you want to customise a #shadow-root (document fragment)\n",'In this case use a "link ref=\'stylesheet\'" or a "style" element!\n','Read the docs regarding to "data-shadow" attribute!\n',`target selector: "${e}"\n`,"target element:",this.target);let a=[];for(let t=0;t<o.length;t++)a.push(`${e}{${s}}`);let n=t.querySelector("[data-styled]");return n||(n=r.appendStyle(t,"")),void(a.length>0&&n.append(a.join("\n")))}let n=e.split(a).filter(String),i="";for(let t of n)if(t.endsWith("[data-shadow]")){i=t;break}if(!i)return;let[l,c]=e.split(i);e=l+i.replace("[data-shadow]","");let u=t.querySelectorAll(e);for(let t of u)t.shadowRoot&&this.applyProperties(t.shadowRoot,""+c.trim(),s)}static async fetchSource(t){try{const e=await fetch(t);return e.ok?await e.text():""}catch(t){return console.error(t),""}}static removeComments(t){return t.replace(e,"").trim()}static removeMediaQueries(t){return t.replace(s,"").trim()}static getRules(e){let s=t,a={};for(let t of Array.from(e.matchAll(s))){if(Array.isArray(t)&&t.length<2)continue;let e=t[1].trim();e.startsWith("@")||(a[e]=t[2].split(";").map((t=>t.trim())).filter(String).join(";"))}return a}static appendStyle(t,e){const s=document.createElement("style");return s.setAttribute("data-styled",""),s.innerText=e,t.append(s),s}}export{r as S}